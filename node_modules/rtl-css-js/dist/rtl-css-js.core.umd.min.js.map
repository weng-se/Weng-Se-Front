{"version":3,"file":"rtl-css-js.core.umd.min.js","sources":["../src/internal/utils.js","../src/internal/property-value-converters.js"],"sourcesContent":["/**\n * Takes an array of [keyValue1, keyValue2] pairs and creates an object of {keyValue1: keyValue2, keyValue2: keyValue1}\n * @param {Array} array the array of pairs\n * @return {Object} the {key, value} pair object\n */\nfunction arrayToObject(array) {\n  return array.reduce((obj, [prop1, prop2]) => {\n    obj[prop1] = prop2\n    obj[prop2] = prop1\n    return obj\n  }, {})\n}\n\nfunction isBoolean(val) {\n  return typeof val === 'boolean'\n}\n\nfunction isNumber(val) {\n  return typeof val === 'number'\n}\n\nfunction isNullOrUndefined(val) {\n  return val === null || typeof val === 'undefined'\n}\n\nfunction isObject(val) {\n  return val && typeof val === 'object'\n}\n\nfunction isString(val) {\n  return typeof val === 'string'\n}\n\nfunction includes(inclusive, inclusee) {\n  return inclusive.indexOf(inclusee) !== -1\n}\n\n/**\n * Flip the sign of a CSS value, possibly with a unit.\n *\n * We can't just negate the value with unary minus due to the units.\n *\n * @private\n * @param {String} value - the original value (for example 77%)\n * @return {String} the result (for example -77%)\n */\nfunction flipSign(value) {\n  if (parseFloat(value) === 0) {\n    // Don't mangle zeroes\n    return value\n  }\n\n  if (value[0] === '-') {\n    return value.slice(1)\n  }\n\n  return `-${value}`\n}\n\nfunction flipTransformSign(match, prefix, offset, suffix) {\n  return prefix + flipSign(offset) + suffix\n}\n\n/**\n * Takes a percentage for background position and inverts it.\n * This was copied and modified from CSSJanus:\n * https://github.com/cssjanus/cssjanus/blob/4245f834365f6cfb0239191a151432fb85abab23/src/cssjanus.js#L152-L175\n * @param {String} value - the original value (for example 77%)\n * @return {String} the result (for example 23%)\n */\nfunction calculateNewBackgroundPosition(value) {\n  const idx = value.indexOf('.')\n  if (idx === -1) {\n    value = `${100 - parseFloat(value)}%`\n  } else {\n    // Two off, one for the \"%\" at the end, one for the dot itself\n    const len = value.length - idx - 2\n    value = 100 - parseFloat(value)\n    value = `${value.toFixed(len)}%`\n  }\n  return value\n}\n\n/**\n * This takes a list of CSS values and converts it to an array\n * @param {String} value - something like `1px`, `1px 2em`, or `3pt rgb(150, 230, 550) 40px calc(100% - 5px)`\n * @return {Array} the split values (for example: `['3pt', 'rgb(150, 230, 550)', '40px', 'calc(100% - 5px)']`)\n */\nfunction getValuesAsList(value) {\n  return (\n    value\n      .replace(/ +/g, ' ') // remove all extraneous spaces\n      .split(' ')\n      .map(i => i.trim()) // get rid of extra space before/after each item\n      .filter(Boolean) // get rid of empty strings\n      // join items which are within parenthese\n      // luckily `calc (100% - 5px)` is invalid syntax and it must be `calc(100% - 5px)`, otherwise this would be even more complex\n      .reduce(\n        ({list, state}, item) => {\n          const openParansCount = (item.match(/\\(/g) || []).length\n          const closedParansCount = (item.match(/\\)/g) || []).length\n          if (state.parensDepth > 0) {\n            list[list.length - 1] = `${list[list.length - 1]} ${item}`\n          } else {\n            list.push(item)\n          }\n          state.parensDepth += openParansCount - closedParansCount\n          return {list, state}\n        },\n        {list: [], state: {parensDepth: 0}},\n      ).list\n  )\n}\n\n/**\n * This is intended for properties that are `top right bottom left` and will switch them to `top left bottom right`\n * @param {String} value - `1px 2px 3px 4px` for example, but also handles cases where there are too few/too many and\n * simply returns the value in those cases (which is the correct behavior)\n * @return {String} the result - `1px 4px 3px 2px` for example.\n */\nfunction handleQuartetValues(value) {\n  const splitValues = getValuesAsList(value)\n  if (splitValues.length <= 3 || splitValues.length > 4) {\n    return value\n  }\n  const [top, right, bottom, left] = splitValues\n  return [top, left, bottom, right].join(' ')\n}\n\nexport {\n  arrayToObject,\n  calculateNewBackgroundPosition,\n  flipTransformSign as calculateNewTranslate,\n  flipTransformSign,\n  flipSign,\n  handleQuartetValues,\n  includes,\n  isBoolean,\n  isNullOrUndefined,\n  isNumber,\n  isObject,\n  isString,\n  getValuesAsList,\n}\n","import {\n  includes,\n  isNumber,\n  calculateNewBackgroundPosition,\n  flipTransformSign,\n  handleQuartetValues,\n  getValuesAsList,\n} from './utils'\n\n// some values require a little fudging, that fudging goes here.\nconst propertyValueConverters = {\n  padding({value}) {\n    if (isNumber(value)) {\n      return value\n    }\n    return handleQuartetValues(value)\n  },\n  textShadow({value}) {\n    // intentionally leaving off the `g` flag here because we only want to change the first number (which is the offset-x)\n    return value.replace(/(-*)([.|\\d]+)/, (match, negative, number) => {\n      if (number === '0') {\n        return match\n      }\n      const doubleNegative = negative === '' ? '-' : ''\n      return `${doubleNegative}${number}`\n    })\n  },\n  borderColor({value}) {\n    return handleQuartetValues(value)\n  },\n  borderRadius({value}) {\n    if (isNumber(value)) {\n      return value\n    }\n    if (includes(value, '/')) {\n      const [radius1, radius2] = value.split('/')\n      const convertedRadius1 = propertyValueConverters.borderRadius({\n        value: radius1.trim(),\n      })\n      const convertedRadius2 = propertyValueConverters.borderRadius({\n        value: radius2.trim(),\n      })\n      return `${convertedRadius1} / ${convertedRadius2}`\n    }\n    const splitValues = getValuesAsList(value)\n    switch (splitValues.length) {\n      case 2: {\n        return splitValues.reverse().join(' ')\n      }\n      case 4: {\n        const [topLeft, topRight, bottomRight, bottomLeft] = splitValues\n        return [topRight, topLeft, bottomLeft, bottomRight].join(' ')\n      }\n      default: {\n        return value\n      }\n    }\n  },\n  background({\n    value,\n    valuesToConvert,\n    isRtl,\n    bgImgDirectionRegex,\n    bgPosDirectionRegex,\n  }) {\n    // Yeah, this is in need of a refactor 🙃...\n    // but this property is a tough cookie 🍪\n    // get the backgroundPosition out of the string by removing everything that couldn't be the backgroundPosition value\n    const backgroundPositionValue = value\n      .replace(\n        /(url\\(.*?\\))|(rgba?\\(.*?\\))|(hsl\\(.*?\\))|(#[a-fA-F0-9]+)|((^| )(\\D)+( |$))/g,\n        '',\n      )\n      .trim()\n    // replace that backgroundPosition value with the converted version\n    value = value.replace(\n      backgroundPositionValue,\n      propertyValueConverters.backgroundPosition({\n        value: backgroundPositionValue,\n        valuesToConvert,\n        isRtl,\n        bgPosDirectionRegex,\n      }),\n    )\n    // do the backgroundImage value replacing on the whole value (because why not?)\n    return propertyValueConverters.backgroundImage({\n      value,\n      valuesToConvert,\n      bgImgDirectionRegex,\n    })\n  },\n  backgroundImage({value, valuesToConvert, bgImgDirectionRegex}) {\n    if (!includes(value, 'url(') && !includes(value, 'linear-gradient(')) {\n      return value\n    }\n    return value.replace(bgImgDirectionRegex, (match, g1, group2) => {\n      return match.replace(group2, valuesToConvert[group2])\n    })\n  },\n  backgroundPosition({value, valuesToConvert, isRtl, bgPosDirectionRegex}) {\n    return (\n      value\n        // intentionally only grabbing the first instance of this because that represents `left`\n        .replace(isRtl ? /^((-|\\d|\\.)+%)/ : null, (match, group) =>\n          calculateNewBackgroundPosition(group),\n        )\n        .replace(bgPosDirectionRegex, match => valuesToConvert[match])\n    )\n  },\n  backgroundPositionX({value, valuesToConvert, isRtl, bgPosDirectionRegex}) {\n    if (isNumber(value)) {\n      return value\n    }\n    return propertyValueConverters.backgroundPosition({\n      value,\n      valuesToConvert,\n      isRtl,\n      bgPosDirectionRegex,\n    })\n  },\n  transform({value}) {\n    // This was copied and modified from CSSJanus:\n    // https://github.com/cssjanus/cssjanus/blob/4a40f001b1ba35567112d8b8e1d9d95eda4234c3/src/cssjanus.js#L152-L153\n    const nonAsciiPattern = '[^\\\\u0020-\\\\u007e]'\n    const unicodePattern = '(?:(?:\\\\[0-9a-f]{1,6})(?:\\\\r\\\\n|\\\\s)?)'\n    const numPattern = '(?:[0-9]*\\\\.[0-9]+|[0-9]+)'\n    const unitPattern = '(?:em|ex|px|cm|mm|in|pt|pc|deg|rad|grad|ms|s|hz|khz|%)'\n    const escapePattern = `(?:${unicodePattern}|\\\\\\\\[^\\\\r\\\\n\\\\f0-9a-f])`\n    const nmstartPattern = `(?:[_a-z]|${nonAsciiPattern}|${escapePattern})`\n    const nmcharPattern = `(?:[_a-z0-9-]|${nonAsciiPattern}|${escapePattern})`\n    const identPattern = `-?${nmstartPattern}${nmcharPattern}*`\n    const quantPattern = `${numPattern}(?:\\\\s*${unitPattern}|${identPattern})?`\n    const signedQuantPattern = `((?:-?${quantPattern})|(?:inherit|auto))`\n    const translateXRegExp = new RegExp(\n      `(translateX\\\\s*\\\\(\\\\s*)${signedQuantPattern}(\\\\s*\\\\))`,\n      'gi',\n    )\n    const translateRegExp = new RegExp(\n      `(translate\\\\s*\\\\(\\\\s*)${signedQuantPattern}((?:\\\\s*,\\\\s*${signedQuantPattern}){0,1}\\\\s*\\\\))`,\n      'gi',\n    )\n    const translate3dRegExp = new RegExp(\n      `(translate3d\\\\s*\\\\(\\\\s*)${signedQuantPattern}((?:\\\\s*,\\\\s*${signedQuantPattern}){0,2}\\\\s*\\\\))`,\n      'gi',\n    )\n    const rotateRegExp = new RegExp(\n      `(rotate[ZY]?\\\\s*\\\\(\\\\s*)${signedQuantPattern}(\\\\s*\\\\))`,\n      'gi',\n    )\n    return value\n      .replace(translateXRegExp, flipTransformSign)\n      .replace(translateRegExp, flipTransformSign)\n      .replace(translate3dRegExp, flipTransformSign)\n      .replace(rotateRegExp, flipTransformSign)\n  },\n}\n\npropertyValueConverters.margin = propertyValueConverters.padding\npropertyValueConverters.borderWidth = propertyValueConverters.padding\npropertyValueConverters.boxShadow = propertyValueConverters.textShadow\npropertyValueConverters.webkitBoxShadow = propertyValueConverters.boxShadow\npropertyValueConverters.mozBoxShadow = propertyValueConverters.boxShadow\npropertyValueConverters.WebkitBoxShadow = propertyValueConverters.boxShadow\npropertyValueConverters.MozBoxShadow = propertyValueConverters.boxShadow\npropertyValueConverters.borderStyle = propertyValueConverters.borderColor\npropertyValueConverters.webkitTransform = propertyValueConverters.transform\npropertyValueConverters.mozTransform = propertyValueConverters.transform\npropertyValueConverters.WebkitTransform = propertyValueConverters.transform\npropertyValueConverters.MozTransform = propertyValueConverters.transform\npropertyValueConverters.transformOrigin =\n  propertyValueConverters.backgroundPosition\npropertyValueConverters.webkitTransformOrigin =\n  propertyValueConverters.transformOrigin\npropertyValueConverters.mozTransformOrigin =\n  propertyValueConverters.transformOrigin\npropertyValueConverters.WebkitTransformOrigin =\n  propertyValueConverters.transformOrigin\npropertyValueConverters.MozTransformOrigin =\n  propertyValueConverters.transformOrigin\n\n// kebab-case versions\n\npropertyValueConverters['text-shadow'] = propertyValueConverters.textShadow\npropertyValueConverters['border-color'] = propertyValueConverters.borderColor\npropertyValueConverters['border-radius'] = propertyValueConverters.borderRadius\npropertyValueConverters['background-image'] =\n  propertyValueConverters.backgroundImage\npropertyValueConverters['background-position'] =\n  propertyValueConverters.backgroundPosition\npropertyValueConverters['background-position-x'] =\n  propertyValueConverters.backgroundPositionX\npropertyValueConverters['border-width'] = propertyValueConverters.padding\npropertyValueConverters['box-shadow'] = propertyValueConverters.textShadow\npropertyValueConverters['-webkit-box-shadow'] =\n  propertyValueConverters.textShadow\npropertyValueConverters['-moz-box-shadow'] = propertyValueConverters.textShadow\npropertyValueConverters['border-style'] = propertyValueConverters.borderColor\npropertyValueConverters['-webkit-transform'] = propertyValueConverters.transform\npropertyValueConverters['-moz-transform'] = propertyValueConverters.transform\npropertyValueConverters['transform-origin'] =\n  propertyValueConverters.transformOrigin\npropertyValueConverters['-webkit-transform-origin'] =\n  propertyValueConverters.transformOrigin\npropertyValueConverters['-moz-transform-origin'] =\n  propertyValueConverters.transformOrigin\n\nexport default propertyValueConverters\n"],"names":["isNumber","val","includes","inclusive","inclusee","indexOf","flipSign","value","parseFloat","slice","flipTransformSign","match","prefix","offset","suffix","calculateNewBackgroundPosition","idx","len","length","toFixed","getValuesAsList","replace","split","map","i","trim","filter","Boolean","reduce","item","list","state","openParansCount","closedParansCount","parensDepth","push","handleQuartetValues","splitValues","top","right","bottom","join","propertyValueConverters","padding","textShadow","negative","number","borderColor","borderRadius","radius1","radius2","reverse","topLeft","topRight","bottomRight","background","valuesToConvert","isRtl","bgImgDirectionRegex","bgPosDirectionRegex","backgroundPositionValue","backgroundPosition","backgroundImage","g1","group2","group","backgroundPositionX","transform","escapePattern","signedQuantPattern","translateXRegExp","RegExp","translateRegExp","translate3dRegExp","rotateRegExp","margin","borderWidth","boxShadow","webkitBoxShadow","mozBoxShadow","WebkitBoxShadow","MozBoxShadow","borderStyle","webkitTransform","mozTransform","WebkitTransform","MozTransform","transformOrigin","webkitTransformOrigin","mozTransformOrigin","WebkitTransformOrigin","MozTransformOrigin","array","obj","prop1","prop2"],"mappings":"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"}