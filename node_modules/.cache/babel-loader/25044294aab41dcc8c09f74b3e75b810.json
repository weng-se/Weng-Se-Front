{"ast":null,"code":"import _regeneratorRuntime from \"/Users/MouhcinePRO/Desktop/Weng Se New/Weng-Se-Front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(importOrders),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchImportOrders),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\nimport { all, call, put, fork, takeLatest } from \"redux-saga/effects\";\nimport { IMPORT_ORDER_REQUEST, IMPORT_ORDER_SUCCESS, IMPORT_ORDER_FAILURE, IMPORT_ORDER_PROGRESS } from \"../actions/Orders\";\nimport axios from 'axios';\n\nfunction importOrders(data) {\n  var dataSet, payload, error;\n  return _regeneratorRuntime.wrap(function importOrders$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          dataSet = JSON.parse(data.value);\n          payload = null, error = null;\n          _context.prev = 2;\n          _context.next = 5;\n          return put({\n            type: IMPORT_ORDER_PROGRESS,\n            progress: 0\n          });\n\n        case 5:\n          _context.next = 7;\n          return axios.post('http://localhost:4000/api/orders', {\n            \"oldId\": \"200000\",\n            \"deliveryDate\": \"2019-03-08T00:00:00.000Z\",\n            \"customers\": \"SAMIA\",\n            \"shippers\": \"WS\",\n            \"numberPallets\": \"2\",\n            \"printBPLabel\": \"L\",\n            \"preparation\": \"OSSOUMANE\",\n            \"controllerBP\": \"L\",\n            \"controlBPDate\": \"12:03:00\",\n            \"printBL\": \"L\",\n            \"controllerBL\": \"A\",\n            \"total_ht\": \"1537\",\n            \"driver\": \"ALPHA\",\n            \"controllerBLSigned\": \"\"\n          }).then(function (res) {\n            if (res.status == 200) payload = res.data;\n          }).catch(function (error) {\n            error = error;\n          });\n\n        case 7:\n          if (!payload) {\n            _context.next = 12;\n            break;\n          }\n\n          _context.next = 10;\n          return put({\n            type: IMPORT_ORDER_SUCCESS,\n            payload: payload,\n            progress: 100\n          });\n\n        case 10:\n          _context.next = 14;\n          break;\n\n        case 12:\n          _context.next = 14;\n          return put({\n            type: IMPORT_ORDER_FAILURE,\n            error: error,\n            progress: 100\n          });\n\n        case 14:\n          _context.next = 20;\n          break;\n\n        case 16:\n          _context.prev = 16;\n          _context.t0 = _context[\"catch\"](2);\n          _context.next = 20;\n          return put({\n            type: IMPORT_ORDER_FAILURE,\n            error: _context.t0,\n            progress: 100\n          });\n\n        case 20:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[2, 16]]);\n}\n\nexport function watchImportOrders() {\n  return _regeneratorRuntime.wrap(function watchImportOrders$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(IMPORT_ORDER_REQUEST, importOrders);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchImportOrders)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Users/MouhcinePRO/Desktop/Weng Se New/Weng-Se-Front/src/sagas/Orders.js"],"names":["importOrders","watchImportOrders","rootSaga","all","call","put","fork","takeLatest","IMPORT_ORDER_REQUEST","IMPORT_ORDER_SUCCESS","IMPORT_ORDER_FAILURE","IMPORT_ORDER_PROGRESS","axios","data","dataSet","JSON","parse","value","payload","error","type","progress","post","then","res","status","catch"],"mappings":";;;;yBAUUA,Y;;;yBAkCOC,iB;;;yBAKQC,Q;;AAhDzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,UAA/B,QAAiD,oBAAjD;AACA,SACAC,oBADA,EAEAC,oBAFA,EAGAC,oBAHA,EAIAC,qBAJA,QAKO,mBALP;AAMA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAAUZ,YAAV,CAAuBa,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AACIC,UAAAA,OADJ,GACcC,IAAI,CAACC,KAAL,CAAWH,IAAI,CAACI,KAAhB,CADd;AAEIC,UAAAA,OAFJ,GAEc,IAFd,EAEoBC,KAFpB,GAE4B,IAF5B;AAAA;AAAA;AAIA,iBAAMd,GAAG,CAAC;AAAEe,YAAAA,IAAI,EAAET,qBAAR;AAA+BU,YAAAA,QAAQ,EAAE;AAAzC,WAAD,CAAT;;AAJA;AAAA;AAKA,iBAAMT,KAAK,CAACU,IAAN,CAAW,kCAAX,EAA+C;AACrD,qBAAS,QAD4C;AAErD,4BAAgB,0BAFqC;AAGrD,yBAAa,OAHwC;AAIrD,wBAAY,IAJyC;AAKrD,6BAAiB,GALoC;AAMrD,4BAAgB,GANqC;AAOrD,2BAAe,WAPsC;AAQrD,4BAAgB,GARqC;AASrD,6BAAiB,UAToC;AAUrD,uBAAW,GAV0C;AAWrD,4BAAgB,GAXqC;AAYrD,wBAAY,MAZyC;AAarD,sBAAU,OAb2C;AAcrD,kCAAsB;AAd+B,WAA/C,EAgBLC,IAhBK,CAgBA,UAAUC,GAAV,EAAe;AACrB,gBAAIA,GAAG,CAACC,MAAJ,IAAc,GAAlB,EAAuBP,OAAO,GAAGM,GAAG,CAACX,IAAd;AACtB,WAlBK,EAkBHa,KAlBG,CAkBG,UAAUP,KAAV,EAAiB;AAAEA,YAAAA,KAAK,GAAGA,KAAR;AAAe,WAlBrC,CAAN;;AALA;AAAA,eAyBID,OAzBJ;AAAA;AAAA;AAAA;;AAAA;AAyBa,iBAAMb,GAAG,CAAC;AAAEe,YAAAA,IAAI,EAAEX,oBAAR;AAA8BS,YAAAA,OAAO,EAAEA,OAAvC;AAAgDG,YAAAA,QAAQ,EAAE;AAA1D,WAAD,CAAT;;AAzBb;AAAA;AAAA;;AAAA;AAAA;AA0BK,iBAAMhB,GAAG,CAAC;AAAEe,YAAAA,IAAI,EAAEV,oBAAR;AAA8BS,YAAAA,KAAK,EAAEA,KAArC;AAA4CE,YAAAA,QAAQ,EAAE;AAAtD,WAAD,CAAT;;AA1BL;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AA6BA,iBAAMhB,GAAG,CAAC;AAAEe,YAAAA,IAAI,EAAEV,oBAAR;AAA8BS,YAAAA,KAAK,aAAnC;AAA4CE,YAAAA,QAAQ,EAAE;AAAtD,WAAD,CAAT;;AA7BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkCA,OAAO,SAAUpB,iBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACP,iBAAMM,UAAU,CAACC,oBAAD,EAAuBR,YAAvB,CAAhB;;AADO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKP,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACf,iBAAMC,GAAG,CAAC,CAACG,IAAI,CAACL,iBAAD,CAAL,CAAD,CAAT;;AADe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["\nimport { all, call, put, fork, takeLatest } from \"redux-saga/effects\";\nimport {\nIMPORT_ORDER_REQUEST,\nIMPORT_ORDER_SUCCESS,\nIMPORT_ORDER_FAILURE,\nIMPORT_ORDER_PROGRESS\n} from \"../actions/Orders\";\nimport axios from 'axios';\n\nfunction* importOrders(data) {\nlet dataSet = JSON.parse(data.value);\nlet payload = null, error = null;\ntry {\nyield put({ type: IMPORT_ORDER_PROGRESS, progress: 0 });\nyield axios.post('http://localhost:4000/api/orders', {\n\"oldId\": \"200000\",\n\"deliveryDate\": \"2019-03-08T00:00:00.000Z\",\n\"customers\": \"SAMIA\",\n\"shippers\": \"WS\",\n\"numberPallets\": \"2\",\n\"printBPLabel\": \"L\",\n\"preparation\": \"OSSOUMANE\",\n\"controllerBP\": \"L\",\n\"controlBPDate\": \"12:03:00\",\n\"printBL\": \"L\",\n\"controllerBL\": \"A\",\n\"total_ht\": \"1537\",\n\"driver\": \"ALPHA\",\n\"controllerBLSigned\": \"\"\n})\n.then(function (res) {\nif (res.status == 200) payload = res.data\n}).catch(function (error) { error = error });\n\nif (payload) yield put({ type: IMPORT_ORDER_SUCCESS, payload: payload, progress: 100 });\nelse yield put({ type: IMPORT_ORDER_FAILURE, error: error, progress: 100 });\n\n} catch (error) {\nyield put({ type: IMPORT_ORDER_FAILURE, error: error, progress: 100 });\n}\n}\n\n\nexport function* watchImportOrders() {\nyield takeLatest(IMPORT_ORDER_REQUEST, importOrders);\n}\n\n\nexport default function* rootSaga() {\nyield all([fork(watchImportOrders)]);\n}"]},"metadata":{},"sourceType":"module"}