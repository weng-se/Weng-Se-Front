{"ast":null,"code":"import _regeneratorRuntime from \"/Users/MouhcinePRO/Desktop/Weng Se New/Weng-Se-Front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(importOrders),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchImportOrders),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\nimport { all, call, put, fork, takeLatest } from \"redux-saga/effects\";\nimport { IMPORT_ORDER_REQUEST, IMPORT_ORDER_SUCCESS, IMPORT_ORDER_FAILURE, IMPORT_ORDER_PROGRESS } from \"../actions/Orders\";\nimport axios from 'axios';\n\nfunction importOrders(data) {\n  var dataSet, payload, error;\n  return _regeneratorRuntime.wrap(function importOrders$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          //let dataSet = JSON.parse(data.value);\n          dataSet = {\n            \"id\": \"5ccc7e7356bd2583758d48af\",\n            \"oldId\": \"22\",\n            \"deliveryDate\": \"2019-01-03T00:00:00.000Z\",\n            \"customers\": \"CHRONOCASH\",\n            \"shippers\": \"WS\",\n            \"numberPallets\": \"4\",\n            \"printBPLabel\": \"L\",\n            \"preparation\": \"MAGA\",\n            \"controllerBP\": \"LU\",\n            \"controlBPDate\": \"11:05:00\",\n            \"printBL\": \"L\",\n            \"controllerBL\": \"A\",\n            \"total_ht\": \"4462.50 \",\n            \"driver\": \"YASSIN\",\n            \"controllerBLSigned\": \"L\",\n            \"numberBL\": \"16394\"\n          };\n          payload = null, error = null;\n          _context.prev = 2;\n          _context.next = 5;\n          return put({\n            type: IMPORT_ORDER_PROGRESS,\n            progress: 0\n          });\n\n        case 5:\n          _context.next = 7;\n          return axios.post('http://localhost:4000/api/orders', dataSet).then(function (res) {\n            if (res.status == 200) payload = res.data;\n          }).catch(function (error) {\n            error = error;\n          });\n\n        case 7:\n          if (!payload) {\n            _context.next = 12;\n            break;\n          }\n\n          _context.next = 10;\n          return put({\n            type: IMPORT_ORDER_SUCCESS,\n            payload: payload,\n            progress: 100\n          });\n\n        case 10:\n          _context.next = 14;\n          break;\n\n        case 12:\n          _context.next = 14;\n          return put({\n            type: IMPORT_ORDER_FAILURE,\n            error: error,\n            progress: 100\n          });\n\n        case 14:\n          _context.next = 20;\n          break;\n\n        case 16:\n          _context.prev = 16;\n          _context.t0 = _context[\"catch\"](2);\n          _context.next = 20;\n          return put({\n            type: IMPORT_ORDER_FAILURE,\n            error: _context.t0,\n            progress: 100\n          });\n\n        case 20:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[2, 16]]);\n}\n\nexport function watchImportOrders() {\n  return _regeneratorRuntime.wrap(function watchImportOrders$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(IMPORT_ORDER_REQUEST, importOrders);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchImportOrders)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Users/MouhcinePRO/Desktop/Weng Se New/Weng-Se-Front/src/sagas/Orders.js"],"names":["importOrders","watchImportOrders","rootSaga","all","call","put","fork","takeLatest","IMPORT_ORDER_REQUEST","IMPORT_ORDER_SUCCESS","IMPORT_ORDER_FAILURE","IMPORT_ORDER_PROGRESS","axios","data","dataSet","payload","error","type","progress","post","then","res","status","catch"],"mappings":";;;;yBASUA,Y;;;yBAqCOC,iB;;;yBAKQC,Q;;AAnDzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,UAA/B,QAAiD,oBAAjD;AACA,SACIC,oBADJ,EAEIC,oBAFJ,EAGIC,oBAHJ,EAIIC,qBAJJ,QAKO,mBALP;AAMA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAAUZ,YAAV,CAAuBa,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AACI;AACIC,UAAAA,OAFR,GAEkB;AACV,kBAAM,0BADI;AAER,qBAAS,IAFD;AAGR,4BAAgB,0BAHR;AAIR,yBAAa,YAJL;AAKR,wBAAY,IALJ;AAMR,6BAAiB,GANT;AAOR,4BAAgB,GAPR;AAQR,2BAAe,MARP;AASR,4BAAgB,IATR;AAUR,6BAAiB,UAVT;AAWR,uBAAW,GAXH;AAYR,4BAAgB,GAZR;AAaR,wBAAY,UAbJ;AAcR,sBAAU,QAdF;AAeR,kCAAsB,GAfd;AAgBR,wBAAY;AAhBJ,WAFlB;AAoBQC,UAAAA,OApBR,GAoBkB,IApBlB,EAoBwBC,KApBxB,GAoBgC,IApBhC;AAAA;AAAA;AAsBQ,iBAAMX,GAAG,CAAC;AAAEY,YAAAA,IAAI,EAAEN,qBAAR;AAA+BO,YAAAA,QAAQ,EAAE;AAAzC,WAAD,CAAT;;AAtBR;AAAA;AAuBQ,iBAAMN,KAAK,CAACO,IAAN,CAAW,kCAAX,EAA+CL,OAA/C,EACDM,IADC,CACI,UAAUC,GAAV,EAAe;AACjB,gBAAIA,GAAG,CAACC,MAAJ,IAAc,GAAlB,EAAuBP,OAAO,GAAGM,GAAG,CAACR,IAAd;AAC1B,WAHC,EAGCU,KAHD,CAGO,UAAUP,KAAV,EAAiB;AAAEA,YAAAA,KAAK,GAAGA,KAAR;AAAe,WAHzC,CAAN;;AAvBR;AAAA,eA4BYD,OA5BZ;AAAA;AAAA;AAAA;;AAAA;AA4BqB,iBAAMV,GAAG,CAAC;AAAEY,YAAAA,IAAI,EAAER,oBAAR;AAA8BM,YAAAA,OAAO,EAAEA,OAAvC;AAAgDG,YAAAA,QAAQ,EAAE;AAA1D,WAAD,CAAT;;AA5BrB;AAAA;AAAA;;AAAA;AAAA;AA6Ba,iBAAMb,GAAG,CAAC;AAAEY,YAAAA,IAAI,EAAEP,oBAAR;AAA8BM,YAAAA,KAAK,EAAEA,KAArC;AAA4CE,YAAAA,QAAQ,EAAE;AAAtD,WAAD,CAAT;;AA7Bb;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAgCQ,iBAAMb,GAAG,CAAC;AAAEY,YAAAA,IAAI,EAAEP,oBAAR;AAA8BM,YAAAA,KAAK,aAAnC;AAA4CE,YAAAA,QAAQ,EAAE;AAAtD,WAAD,CAAT;;AAhCR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqCA,OAAO,SAAUjB,iBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAMM,UAAU,CAACC,oBAAD,EAAuBR,YAAvB,CAAhB;;AADG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKP,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CAACG,IAAI,CAACL,iBAAD,CAAL,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, call, put, fork, takeLatest } from \"redux-saga/effects\";\nimport {\n    IMPORT_ORDER_REQUEST,\n    IMPORT_ORDER_SUCCESS,\n    IMPORT_ORDER_FAILURE,\n    IMPORT_ORDER_PROGRESS\n} from \"../actions/Orders\";\nimport axios from 'axios';\n\nfunction* importOrders(data) {\n    //let dataSet = JSON.parse(data.value);\n    let dataSet = {\n        \"id\": \"5ccc7e7356bd2583758d48af\",\n          \"oldId\": \"22\",\n          \"deliveryDate\": \"2019-01-03T00:00:00.000Z\",\n          \"customers\": \"CHRONOCASH\",\n          \"shippers\": \"WS\",\n          \"numberPallets\": \"4\",\n          \"printBPLabel\": \"L\",\n          \"preparation\": \"MAGA\",\n          \"controllerBP\": \"LU\",\n          \"controlBPDate\": \"11:05:00\",\n          \"printBL\": \"L\",\n          \"controllerBL\": \"A\",\n          \"total_ht\": \"4462.50 \",\n          \"driver\": \"YASSIN\",\n          \"controllerBLSigned\": \"L\",\n          \"numberBL\": \"16394\"\n        };\n    let payload = null, error = null;\n    try {\n        yield put({ type: IMPORT_ORDER_PROGRESS, progress: 0 });\n        yield axios.post('http://localhost:4000/api/orders', dataSet)\n            .then(function (res) {\n                if (res.status == 200) payload = res.data\n            }).catch(function (error) { error = error });\n\n        if (payload) yield put({ type: IMPORT_ORDER_SUCCESS, payload: payload, progress: 100 });\n        else yield put({ type: IMPORT_ORDER_FAILURE, error: error, progress: 100 });\n\n    } catch (error) {\n        yield put({ type: IMPORT_ORDER_FAILURE, error: error, progress: 100 });\n    }\n}\n\n\nexport function* watchImportOrders() {\n    yield takeLatest(IMPORT_ORDER_REQUEST, importOrders);\n}\n\n\nexport default function* rootSaga() {\n    yield all([fork(watchImportOrders)]);\n}\n"]},"metadata":{},"sourceType":"module"}