{"ast":null,"code":"/**\n* @license nested-property https://github.com/cosmosio/nested-property\n*\n* The MIT License (MIT)\n*\n* Copyright (c) 2014-2015 Olivier Scherrer <pode.fr@gmail.com>\n*/\n\"use strict\";\n\nmodule.exports = {\n  set: setNestedProperty,\n  get: getNestedProperty,\n  has: hasNestedProperty,\n  hasOwn: function hasOwn(object, property, options) {\n    return this.has(object, property, options || {\n      own: true\n    });\n  },\n  isIn: isInNestedProperty\n};\n/**\n * Get the property of an object nested in one or more objects\n * given an object such as a.b.c.d = 5, getNestedProperty(a, \"b.c.d\") will return 5.\n * @param {Object} object the object to get the property from\n * @param {String} property the path to the property as a string\n * @returns the object or the the property value if found\n */\n\nfunction getNestedProperty(object, property) {\n  if (object && typeof object == \"object\") {\n    if (typeof property == \"string\" && property !== \"\") {\n      var split = property.split(\".\");\n      return split.reduce(function (obj, prop) {\n        return obj && obj[prop];\n      }, object);\n    } else if (typeof property == \"number\") {\n      return object[property];\n    } else {\n      return object;\n    }\n  } else {\n    return object;\n  }\n}\n/**\n * Tell if a nested object has a given property (or array a given index)\n * given an object such as a.b.c.d = 5, hasNestedProperty(a, \"b.c.d\") will return true.\n * It also returns true if the property is in the prototype chain.\n * @param {Object} object the object to get the property from\n * @param {String} property the path to the property as a string\n * @param {Object} options:\n *  - own: set to reject properties from the prototype\n * @returns true if has (property in object), false otherwise\n */\n\n\nfunction hasNestedProperty(object, property, options) {\n  options = options || {};\n\n  if (object && typeof object == \"object\") {\n    if (typeof property == \"string\" && property !== \"\") {\n      var split = property.split(\".\");\n      return split.reduce(function (obj, prop, idx, array) {\n        if (idx == array.length - 1) {\n          if (options.own) {\n            return !!(obj && obj.hasOwnProperty(prop));\n          } else {\n            return !!(obj !== null && typeof obj == \"object\" && prop in obj);\n          }\n        }\n\n        return obj && obj[prop];\n      }, object);\n    } else if (typeof property == \"number\") {\n      return property in object;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n}\n/**\n * Set the property of an object nested in one or more objects\n * If the property doesn't exist, it gets created.\n * @param {Object} object\n * @param {String} property\n * @param value the value to set\n * @returns object if no assignment was made or the value if the assignment was made\n */\n\n\nfunction setNestedProperty(object, property, value) {\n  if (object && typeof object == \"object\") {\n    if (typeof property == \"string\" && property !== \"\") {\n      var split = property.split(\".\");\n      return split.reduce(function (obj, prop, idx) {\n        obj[prop] = obj[prop] || {};\n\n        if (split.length == idx + 1) {\n          obj[prop] = value;\n        }\n\n        return obj[prop];\n      }, object);\n    } else if (typeof property == \"number\") {\n      object[property] = value;\n      return object[property];\n    } else {\n      return object;\n    }\n  } else {\n    return object;\n  }\n}\n/**\n * Tell if an object is on the path to a nested property\n * If the object is on the path, and the path exists, it returns true, and false otherwise.\n * @param {Object} object to get the nested property from\n * @param {String} property name of the nested property\n * @param {Object} objectInPath the object to check\n * @param {Object} options:\n *  - validPath: return false if the path is invalid, even if the object is in the path\n * @returns {boolean} true if the object is on the path\n */\n\n\nfunction isInNestedProperty(object, property, objectInPath, options) {\n  options = options || {};\n\n  if (object && typeof object == \"object\") {\n    if (typeof property == \"string\" && property !== \"\") {\n      var split = property.split(\".\"),\n          isIn = false,\n          pathExists;\n      pathExists = !!split.reduce(function (obj, prop) {\n        isIn = isIn || obj === objectInPath || !!obj && obj[prop] === objectInPath;\n        return obj && obj[prop];\n      }, object);\n\n      if (options.validPath) {\n        return isIn && pathExists;\n      } else {\n        return isIn;\n      }\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}