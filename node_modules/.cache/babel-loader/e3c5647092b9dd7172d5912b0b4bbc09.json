{"ast":null,"code":"import _classCallCheck from \"/Users/MouhcinePRO/Desktop/Weng Se New/Weng-Se-Front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/MouhcinePRO/Desktop/Weng Se New/Weng-Se-Front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/MouhcinePRO/Desktop/Weng Se New/Weng-Se-Front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/MouhcinePRO/Desktop/Weng Se New/Weng-Se-Front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/MouhcinePRO/Desktop/Weng Se New/Weng-Se-Front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/MouhcinePRO/Desktop/Weng Se New/Weng-Se-Front/src/app/routes/Batch/index.js\";\nimport React from 'react';\nimport ContainerHeader from 'components/ContainerHeader/index';\nimport IntlMessages from 'util/IntlMessages';\nimport $ from 'jquery';\nimport * as XLSX from 'xlsx';\nimport { connect } from 'react-redux';\nimport { IMPORT_ORDER_REQUEST } from '../../../actions/Orders';\n\nvar BatchPage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(BatchPage, _React$Component);\n\n  function BatchPage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, BatchPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BatchPage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleClick = function () {\n      if (window.File && window.FileReader && window.FileList && window.Blob) {\n        var file = document.getElementById(\"file\").files[0];\n        var reader = new FileReader();\n        reader.readAsBinaryString(file);\n\n        reader.onload = function (evt) {\n          /* Parse data */\n          var bstr = evt.target.result;\n          var wb = XLSX.read(bstr, {\n            type: 'binary'\n          });\n          /* Get first worksheet */\n\n          var wsname = wb.SheetNames[0];\n          var ws = wb.Sheets[wsname];\n          /* Convert array of arrays */\n\n          var data = XLSX.utils.sheet_to_csv(ws, {\n            header: 1\n          });\n          /* Update state */\n          //console.log(this.csvToJSON(data));\n\n          _this.props.import(_this.csvToJSON(data));\n        };\n\n        reader.onerror = function () {\n          alert('Unable to read ' + file.fileName);\n        };\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(BatchPage, [{\n    key: \"CSVToArray\",\n    value: function CSVToArray(strData, strDelimiter) {\n      strDelimiter = strDelimiter || \",\"; // Create a regular expression to parse the CSV values.\n\n      var objPattern = new RegExp( // Delimiters.\n      \"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" + // Quoted fields.\n      \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" + // Standard fields.\n      \"([^\\\"\\\\\" + strDelimiter + \"\\\\r\\\\n]*))\", \"gi\");\n      var arrData = [[]];\n      var arrMatches = null;\n\n      while (arrMatches = objPattern.exec(strData)) {\n        // Get the delimiter that was found.\n        var strMatchedDelimiter = arrMatches[1];\n\n        if (strMatchedDelimiter.length && strMatchedDelimiter != strDelimiter) {\n          arrData.push([]);\n        }\n\n        if (arrMatches[2]) {\n          // We found a quoted value. When we capture\n          // this value, unescape any double quotes.\n          var strMatchedValue = arrMatches[2].replace(new RegExp(\"\\\"\\\"\", \"g\"), \"\\\"\");\n        } else {\n          // We found a non-quoted value.\n          var strMatchedValue = arrMatches[3];\n        } // Now that we have our value string, let's add\n        // it to the data array.\n\n\n        arrData[arrData.length - 1].push(strMatchedValue);\n      }\n\n      return arrData;\n    }\n  }, {\n    key: \"csvToJSON\",\n    value: function csvToJSON(csv) {\n      var lines = csv.split(\"\\n\");\n      var result = [];\n      var headers = lines[0].split(\",\");\n\n      for (var i = 1; i < lines.length; i++) {\n        var obj = {};\n        var currentline = lines[i].split(\",\");\n\n        for (var j = 0; j < headers.length; j++) {\n          obj[headers[j]] = currentline[j];\n        }\n\n        result.push(obj);\n      } //return result; //JavaScript object\n\n\n      return JSON.stringify(result); //JSON\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"app-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"file\",\n        name: \"file\",\n        id: \"file\",\n        accept: \".csv,.xlsx\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        type: \"button\",\n        onClick: function onClick() {\n          return _this2.handleClick();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \"import\"));\n    }\n  }]);\n\n  return BatchPage;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    progress: state.orders.progress,\n    error: state.orders.error\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    import: function _import(data) {\n      return dispatch({\n        type: IMPORT_ORDER_REQUEST,\n        value: data\n      });\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BatchPage);","map":{"version":3,"sources":["/Users/MouhcinePRO/Desktop/Weng Se New/Weng-Se-Front/src/app/routes/Batch/index.js"],"names":["React","ContainerHeader","IntlMessages","$","XLSX","connect","IMPORT_ORDER_REQUEST","BatchPage","handleClick","window","File","FileReader","FileList","Blob","file","document","getElementById","files","reader","readAsBinaryString","onload","evt","bstr","target","result","wb","read","type","wsname","SheetNames","ws","Sheets","data","utils","sheet_to_csv","header","props","import","csvToJSON","onerror","alert","fileName","strData","strDelimiter","objPattern","RegExp","arrData","arrMatches","exec","strMatchedDelimiter","length","push","strMatchedValue","replace","csv","lines","split","headers","i","obj","currentline","j","JSON","stringify","Component","mapStateToProps","state","progress","orders","error","mapDispatchToProps","dispatch","value"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ContainerHeader from 'components/ContainerHeader/index';\nimport IntlMessages from 'util/IntlMessages';\nimport $ from 'jquery';\nimport * as XLSX from 'xlsx';\nimport { connect } from 'react-redux';\nimport { IMPORT_ORDER_REQUEST } from '../../../actions/Orders';\n\nclass BatchPage extends React.Component {\n\n\n\n    CSVToArray(strData, strDelimiter) {\n        strDelimiter = (strDelimiter || \",\");\n        // Create a regular expression to parse the CSV values.\n        var objPattern = new RegExp(\n            (\n                // Delimiters.\n                \"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\n                // Quoted fields.\n                \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\n                // Standard fields.\n                \"([^\\\"\\\\\" + strDelimiter + \"\\\\r\\\\n]*))\"\n            ),\n            \"gi\"\n        );\n        var arrData = [[]];\n        var arrMatches = null;\n        while (arrMatches = objPattern.exec(strData)) {\n            // Get the delimiter that was found.\n            var strMatchedDelimiter = arrMatches[1];\n            if (\n                strMatchedDelimiter.length &&\n                (strMatchedDelimiter != strDelimiter)\n            ) {\n                arrData.push([]);\n            }\n\n            if (arrMatches[2]) {\n                // We found a quoted value. When we capture\n                // this value, unescape any double quotes.\n                var strMatchedValue = arrMatches[2].replace(\n                    new RegExp(\"\\\"\\\"\", \"g\"),\n                    \"\\\"\"\n                );\n            } else {\n                // We found a non-quoted value.\n                var strMatchedValue = arrMatches[3];\n            }\n            // Now that we have our value string, let's add\n            // it to the data array.\n            arrData[arrData.length - 1].push(strMatchedValue);\n        }\n        return (arrData);\n    }\n\n    handleClick = () => {\n        if (window.File && window.FileReader && window.FileList && window.Blob) {\n\n            let file = document.getElementById(\"file\").files[0];\n            const reader = new FileReader();\n            reader.readAsBinaryString(file);\n            reader.onload = (evt) => {\n                /* Parse data */\n                const bstr = evt.target.result;\n                const wb = XLSX.read(bstr, { type: 'binary' });\n                /* Get first worksheet */\n                const wsname = wb.SheetNames[0];\n                const ws = wb.Sheets[wsname];\n                /* Convert array of arrays */\n                const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\n                /* Update state */\n                //console.log(this.csvToJSON(data));\n                this.props.import(this.csvToJSON(data));\n\n            };\n            reader.onerror = function () {\n                alert('Unable to read ' + file.fileName);\n            };\n        }\n    }\n\n\n    csvToJSON(csv) {\n\n        var lines = csv.split(\"\\n\");\n\n        var result = [];\n\n        var headers = lines[0].split(\",\");\n\n        for (var i = 1; i < lines.length; i++) {\n\n            var obj = {};\n            var currentline = lines[i].split(\",\");\n\n            for (var j = 0; j < headers.length; j++) {\n                obj[headers[j]] = currentline[j];\n            }\n\n            result.push(obj);\n\n        }\n\n        //return result; //JavaScript object\n        return JSON.stringify(result); //JSON\n    }\n\n\n\n    render() {\n        return (\n            <div className=\"app-wrapper\">\n                <input type=\"file\" name=\"file\" id=\"file\" accept=\".csv,.xlsx\" /><br />\n                <button type=\"button\" onClick={() => this.handleClick()}>import</button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        progress: state.orders.progress,\n        error: state.orders.error\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        import: (data) => dispatch({ type: IMPORT_ORDER_REQUEST , value: data }),\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(BatchPage);\n\n"]},"metadata":{},"sourceType":"module"}