{"ast":null,"code":"import _regeneratorRuntime from \"/Users/MouhcinePRO/Desktop/Weng Se New/Weng-Se-Front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(importOrders),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchImportOrders),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\nimport { all, call, put, fork, takeLatest } from \"redux-saga/effects\";\nimport { IMPORT_ORDER_REQUEST, IMPORT_ORDER_SUCCESS, IMPORT_ORDER_FAILURE, IMPORT_ORDER_PROGRESS } from \"../actions/Orders\";\nimport axios from 'axios';\n\nfunction importOrders(data) {\n  var dataSet, payload, error;\n  return _regeneratorRuntime.wrap(function importOrders$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          dataSet = JSON.parse(data.value);\n          payload = null, error = null;\n          _context.prev = 2;\n          _context.next = 5;\n          return put({\n            type: IMPORT_ORDER_PROGRESS,\n            progress: 0\n          });\n\n        case 5:\n          _context.next = 7;\n          return axios.post('http://localhost:4000/api/orders', {\n            \"id\": null,\n            \"oldId\": \"200000\",\n            \"deliveryDate\": \"2019-03-08T00:00:00.000Z\",\n            \"customers\": \"SAMIA\",\n            \"shippers\": \"WS\",\n            \"numberPallets\": \"2\",\n            \"printBPLabel\": \"L\",\n            \"preparation\": \"OSSOUMANE\",\n            \"controllerBP\": \"L\",\n            \"controlBPDate\": \"12:03:00\",\n            \"printBL\": \"L\",\n            \"controllerBL\": \"A\",\n            \"total_ht\": \"1537.40 \",\n            \"driver\": \"ALPHA\",\n            \"controllerBLSigned\": \"\",\n            \"numberBL\": \"17462\"\n          }).then(function (res) {\n            if (res.status == 200) payload = res.data;\n          }).catch(function (error) {\n            error = error;\n          });\n\n        case 7:\n          if (!payload) {\n            _context.next = 12;\n            break;\n          }\n\n          _context.next = 10;\n          return put({\n            type: IMPORT_ORDER_SUCCESS,\n            payload: payload,\n            progress: 100\n          });\n\n        case 10:\n          _context.next = 14;\n          break;\n\n        case 12:\n          _context.next = 14;\n          return put({\n            type: IMPORT_ORDER_FAILURE,\n            error: error,\n            progress: 100\n          });\n\n        case 14:\n          _context.next = 20;\n          break;\n\n        case 16:\n          _context.prev = 16;\n          _context.t0 = _context[\"catch\"](2);\n          _context.next = 20;\n          return put({\n            type: IMPORT_ORDER_FAILURE,\n            error: _context.t0,\n            progress: 100\n          });\n\n        case 20:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[2, 16]]);\n}\n\nexport function watchImportOrders() {\n  return _regeneratorRuntime.wrap(function watchImportOrders$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(IMPORT_ORDER_REQUEST, importOrders);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchImportOrders)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Users/MouhcinePRO/Desktop/Weng Se New/Weng-Se-Front/src/sagas/Orders.js"],"names":["importOrders","watchImportOrders","rootSaga","all","call","put","fork","takeLatest","IMPORT_ORDER_REQUEST","IMPORT_ORDER_SUCCESS","IMPORT_ORDER_FAILURE","IMPORT_ORDER_PROGRESS","axios","data","dataSet","JSON","parse","value","payload","error","type","progress","post","then","res","status","catch"],"mappings":";;;;yBAeUA,Y;;;yBAsDOC,iB;;;yBAKQC,Q;;AA1EzB,SACIC,GADJ,EAEIC,IAFJ,EAGIC,GAHJ,EAIIC,IAJJ,EAKIC,UALJ,QAMO,oBANP;AAOA,SACIC,oBADJ,EAEIC,oBAFJ,EAGIC,oBAHJ,EAIIC,qBAJJ,QAKO,mBALP;AAMA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAAUZ,YAAV,CAAuBa,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,UAAAA,OADR,GACkBC,IAAI,CAACC,KAAL,CAAWH,IAAI,CAACI,KAAhB,CADlB;AAEQC,UAAAA,OAFR,GAEkB,IAFlB,EAGQC,KAHR,GAGgB,IAHhB;AAAA;AAAA;AAKQ,iBAAMd,GAAG,CAAC;AACNe,YAAAA,IAAI,EAAET,qBADA;AAENU,YAAAA,QAAQ,EAAE;AAFJ,WAAD,CAAT;;AALR;AAAA;AASQ,iBAAMT,KAAK,CAACU,IAAN,CAAW,kCAAX,EAA+C;AAC7C,kBAAM,IADuC;AAE7C,qBAAS,QAFoC;AAG7C,4BAAgB,0BAH6B;AAI7C,yBAAa,OAJgC;AAK7C,wBAAY,IALiC;AAM7C,6BAAiB,GAN4B;AAO7C,4BAAgB,GAP6B;AAQ7C,2BAAe,WAR8B;AAS7C,4BAAgB,GAT6B;AAU7C,6BAAiB,UAV4B;AAW7C,uBAAW,GAXkC;AAY7C,4BAAgB,GAZ6B;AAa7C,wBAAY,UAbiC;AAc7C,sBAAU,OAdmC;AAe7C,kCAAsB,EAfuB;AAgB7C,wBAAY;AAhBiC,WAA/C,EAkBDC,IAlBC,CAkBI,UAAUC,GAAV,EAAe;AACjB,gBAAIA,GAAG,CAACC,MAAJ,IAAc,GAAlB,EAAuBP,OAAO,GAAGM,GAAG,CAACX,IAAd;AAC1B,WApBC,EAoBCa,KApBD,CAoBO,UAAUP,KAAV,EAAiB;AACtBA,YAAAA,KAAK,GAAGA,KAAR;AACH,WAtBC,CAAN;;AATR;AAAA,eAiCYD,OAjCZ;AAAA;AAAA;AAAA;;AAAA;AAiCqB,iBAAMb,GAAG,CAAC;AACnBe,YAAAA,IAAI,EAAEX,oBADa;AAEnBS,YAAAA,OAAO,EAAEA,OAFU;AAGnBG,YAAAA,QAAQ,EAAE;AAHS,WAAD,CAAT;;AAjCrB;AAAA;AAAA;;AAAA;AAAA;AAsCa,iBAAMhB,GAAG,CAAC;AACXe,YAAAA,IAAI,EAAEV,oBADK;AAEXS,YAAAA,KAAK,EAAEA,KAFI;AAGXE,YAAAA,QAAQ,EAAE;AAHC,WAAD,CAAT;;AAtCb;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AA6CQ,iBAAMhB,GAAG,CAAC;AACNe,YAAAA,IAAI,EAAEV,oBADA;AAENS,YAAAA,KAAK,aAFC;AAGNE,YAAAA,QAAQ,EAAE;AAHJ,WAAD,CAAT;;AA7CR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsDA,OAAO,SAAUpB,iBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAMM,UAAU,CAACC,oBAAD,EAAuBR,YAAvB,CAAhB;;AADG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKP,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CAACG,IAAI,CAACL,iBAAD,CAAL,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {\n    all,\n    call,\n    put,\n    fork,\n    takeLatest\n} from \"redux-saga/effects\";\nimport {\n    IMPORT_ORDER_REQUEST,\n    IMPORT_ORDER_SUCCESS,\n    IMPORT_ORDER_FAILURE,\n    IMPORT_ORDER_PROGRESS\n} from \"../actions/Orders\";\nimport axios from 'axios';\n\nfunction* importOrders(data) {\n    let dataSet = JSON.parse(data.value);\n    let payload = null,\n        error = null;\n    try {\n        yield put({\n            type: IMPORT_ORDER_PROGRESS,\n            progress: 0\n        });\n        yield axios.post('http://localhost:4000/api/orders', {\n                \"id\": null,\n                \"oldId\": \"200000\",\n                \"deliveryDate\": \"2019-03-08T00:00:00.000Z\",\n                \"customers\": \"SAMIA\",\n                \"shippers\": \"WS\",\n                \"numberPallets\": \"2\",\n                \"printBPLabel\": \"L\",\n                \"preparation\": \"OSSOUMANE\",\n                \"controllerBP\": \"L\",\n                \"controlBPDate\": \"12:03:00\",\n                \"printBL\": \"L\",\n                \"controllerBL\": \"A\",\n                \"total_ht\": \"1537.40 \",\n                \"driver\": \"ALPHA\",\n                \"controllerBLSigned\": \"\",\n                \"numberBL\": \"17462\"\n            })\n            .then(function (res) {\n                if (res.status == 200) payload = res.data\n            }).catch(function (error) {\n                error = error\n            });\n\n        if (payload) yield put({\n            type: IMPORT_ORDER_SUCCESS,\n            payload: payload,\n            progress: 100\n        });\n        else yield put({\n            type: IMPORT_ORDER_FAILURE,\n            error: error,\n            progress: 100\n        });\n\n    } catch (error) {\n        yield put({\n            type: IMPORT_ORDER_FAILURE,\n            error: error,\n            progress: 100\n        });\n    }\n}\n\n\nexport function* watchImportOrders() {\n    yield takeLatest(IMPORT_ORDER_REQUEST, importOrders);\n}\n\n\nexport default function* rootSaga() {\n    yield all([fork(watchImportOrders)]);\n}"]},"metadata":{},"sourceType":"module"}