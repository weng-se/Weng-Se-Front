{"ast":null,"code":"/*eslint-disable no-nested-ternary */\n\n/**\n * Convert hex to RGB\n *\n * @param {string} hex\n * @returns {Object}\n */\nexport function hexToRGB(hex) {\n  // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n  var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  var newHex = hex.replace(shorthandRegex, function (m, r, g, b) {\n    return r + r + g + g + b + b;\n  });\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(newHex);\n  return result ? {\n    r: parseInt(result[1], 16),\n    g: parseInt(result[2], 16),\n    b: parseInt(result[3], 16)\n  } : null;\n}\n/**\n * Get the current browser\n *\n * @returns {String}\n */\n\nfunction getBrowser() {\n  /* istanbul ignore if */\n  if (typeof window === 'undefined') {\n    return 'node';\n  } // Opera 8.0+\n\n\n  var isOpera = Boolean(window.opera) || navigator.userAgent.indexOf(' OPR/') >= 0; // Firefox 1.0+\n\n  var isFirefox = typeof InstallTrigger !== 'undefined'; // Chrome 1+\n\n  var isChrome = !!window.chrome && !!window.chrome.webstore; // Safari <= 9 \"[object HTMLElementConstructor]\"\n\n  var isSafari = (Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0 || !isChrome) && !isOpera && window.webkitAudioContext !== undefined; // Internet Explorer 6-11\n\n  var isIE = Boolean(document.documentMode); // At least IE6\n\n  return isOpera ? 'opera' : isFirefox ? 'firefox' : isChrome ? 'chrome' : isSafari ? 'safari' : isIE ? 'ie' : '';\n}\n\nexport var browser = getBrowser();\n/**\n * Helper function to get the browser-normalized \"document height\"\n * @returns {Number}\n */\n\nexport function getDocHeight() {\n  var _document = document,\n      body = _document.body,\n      html = _document.documentElement;\n  return Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n}\n/**\n * Get DOM document root element\n * @returns {Element}\n */\n\nexport function getRootEl() {\n  var _document2 = document,\n      scrollingElement = _document2.scrollingElement;\n\n  if (!scrollingElement) {\n    return ['ie', 'firefox'].indexOf(browser) > -1 ? document.documentElement : document.body;\n  }\n\n  return scrollingElement;\n}\n/**\n * Log method calls if debug is enabled\n *\n * @private\n * @param {Object}       arg         - Immediately destructured option argument\n * @param {string}       arg.type    - The method the logger was called from\n * @param {string|Array} [arg.msg]   - The message to be logged\n * @param {boolean}      [arg.warn]  - If true, the message will be a warning\n * @param {boolean}      [arg.debug] - Nothing will be logged unless debug is true\n */\n\nexport function logger(_ref) {\n  var _ref$type = _ref.type,\n      type = _ref$type === undefined ? 'joyride' : _ref$type,\n      msg = _ref.msg,\n      _ref$warn = _ref.warn,\n      warn = _ref$warn === undefined ? false : _ref$warn,\n      _ref$debug = _ref.debug,\n      debug = _ref$debug === undefined ? false : _ref$debug;\n  var loggingFunction = warn ? console.warn || console.error : console.log; //eslint-disable-line no-console\n\n  if (debug) {\n    console.log('%c' + type, 'color: #760bc5; font-weight: bold; font-size: 12px;'); //eslint-disable-line no-console\n\n    /* istanbul ignore else */\n\n    if (msg) {\n      if (Array.isArray(msg)) {\n        loggingFunction.apply(console, msg);\n      } else {\n        loggingFunction.apply(console, [msg]);\n      }\n    }\n  }\n}\n/**\n * Check for deprecated selector styles, return stringified, safer versions\n *\n * @param   {string|Object} selector - The selector provided in a step object\n * @returns {string}                   A cleaned-up selector string\n */\n\nexport function sanitizeSelector(selector) {\n  if (selector.dataset && selector.dataset.reactid) {\n    console.warn('Deprecation warning: React 15.0 removed reactid. Update your code.'); //eslint-disable-line no-console\n\n    return '[data-reactid=\"' + selector.dataset.reactid + '\"]';\n  } else if (selector.dataset) {\n    console.error('Unsupported error: React 15.0+ doesnâ€™t write reactid to the DOM anymore, please use a plain class in your step.', selector); //eslint-disable-line no-console\n\n    /* istanbul ignore else */\n\n    if (selector.className) {\n      return '.' + selector.className.replace(' ', '.');\n    }\n  }\n\n  return selector;\n}\n/**\n * Find the bounding client rect\n *\n * @private\n * @param {Object} element - The target element\n * @param {string} [offsetParent] - The parent element to calculate offsets from\n * @returns {DOMRect}\n */\n\nexport function getOffsetBoundingClientRect(element, offsetParent) {\n  var elementRect = element.getBoundingClientRect();\n\n  if (!offsetParent) {\n    return elementRect;\n  }\n\n  var offsetParentRect = offsetParent.getBoundingClientRect();\n  var offsetTop = offsetParentRect.top > 0 ? elementRect.top - offsetParentRect.top : elementRect.top;\n  var offsetLeft = offsetParentRect.left > 0 ? elementRect.left - offsetParentRect.left : elementRect.left;\n  var offsetRight = offsetParentRect.right > 0 ? offsetParentRect.right - elementRect.right : elementRect.right;\n  var offsetBottom = offsetParentRect.bottom > 0 ? offsetParentRect.bottom - elementRect.bottom : elementRect.bottom;\n  return {\n    top: offsetTop,\n    left: offsetLeft,\n    right: offsetRight,\n    bottom: offsetBottom,\n    x: offsetLeft,\n    y: offsetTop,\n    width: elementRect.width,\n    height: elementRect.height\n  };\n}","map":null,"metadata":{},"sourceType":"module"}